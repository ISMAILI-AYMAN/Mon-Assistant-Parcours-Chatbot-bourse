import streamlit as st
from streamlit_chat import message
from langchain_chroma import Chroma
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_ollama import ChatOllama
from ingest import main

# Initialisation de la base de donn√©es
if "db" not in st.session_state:
    # Initialise la base de donn√©es une seule fois
    st.session_state.db = main()  

# Fonction pour r√©cup√©rer des r√©ponses depuis la base de donn√©es
def retrieve_from_db(question):
    model = ChatOllama(model="mistral")
    retriever = st.session_state.db.similarity_search(question, k=5)

    after_rag_template = """Tu es un assistant sp√©cialis√© dans les parcours de bourses d'√©tudes. Ton r√¥le est d'aider les utilisateurs √† trouver les opportunit√©s de bourses les plus adapt√©es √† leur profil, tout en agissant comme un conseiller et un guide personnalis√©.
    Tu ne r√©ponds qu'en fran√ßais.

    Voici tes responsabilit√©s principales :
    1. **R√©ponses bas√©es sur le contexte** : Si une question concerne une bourse pr√©sente dans la base de donn√©es fournie (le contexte), donne une r√©ponse claire et d√©taill√©e bas√©e uniquement sur ces informations.
    2. **Propositions adapt√©es** : Si l'utilisateur n'a pas donn√© assez d'informations sur son profil (par exemple, pays d'origine, niveau d'√©tudes, domaine d'int√©r√™t, etc.), invite-le poliment √† fournir ces d√©tails pour mieux l'aider.
    3. **Suggestions de bourses** : Une fois que tu as suffisamment d'informations sur l'utilisateur, propose des opportunit√©s de bourses pertinentes et justifie pourquoi elles conviennent √† son profil.
    4. **Guidance proactive** : Si une r√©ponse n'est pas disponible dans la base de donn√©es, informe l'utilisateur de mani√®re honn√™te et propose des pistes ou questions compl√©mentaires pour clarifier ses besoins ou explorer d'autres options.

    Lorsque tu formules tes r√©ponses :
    - Sois bienveillant, clair et informatif.
    - Agis comme un mentor qui cherche √† maximiser les chances de l'utilisateur de trouver une bourse adapt√©e.

    Exemple de r√©ponse si aucune information pertinente n'est trouv√©e dans la base :
    "Je suis d√©sol√©, mais je n'ai pas cette r√©ponse dans mes donn√©es actuelles. Cependant, pourriez-vous pr√©ciser votre niveau d'√©tudes, votre domaine d'int√©r√™t ou le pays o√π vous recherchez une bourse‚ÄØ? Cela m'aidera √† vous orienter davantage."

    Tu as acc√®s √† la base de donn√©es suivante contenant des informations sur les bourses d'√©tudes :
    {context}

    Question : {question}"""

    after_rag_prompt = ChatPromptTemplate.from_template(after_rag_template)

    after_rag_chain = (
        {"context": RunnablePassthrough(), "question": RunnablePassthrough()}
        | after_rag_prompt
        | model
        | StrOutputParser()
    )

    return after_rag_chain.invoke({"context": retriever, "question": question})


# Configuration de l'application Streamlit
st.set_page_config(page_title="üí¨ Mon Assistant Parcours de bourses d'√©tudes", layout="wide")

# Th√®me sombre et style des messages
st.markdown(
    """
    <style>
    body {
        background-color: #1E1E1E;
        color: white;
    }
    .stButton>button {
        background-color: #2C2C2C;
        color: white;
        border: 1px solid #3E3E3E;
    }
    .stTextInput>div>div>input {
        background-color: #2C2C2C;
        color: white;
    }
    .stTextInput>div>label {
        color: white;
    }
    .message-box {
        display: flex;
        align-items: center;
        margin: 10px 0;
    }
    .user-message {
        background-color: #0078D4;
        color: white;
        padding: 10px;
        border-radius: 10px;
        max-width: 60%;
        text-align: left;
    }
    .bot-message {
        background-color: #444444;
        color: white;
        padding: 10px;
        border-radius: 10px;
        max-width: 60%;
        text-align: left;
    }
    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }
    .user-container {
        justify-content: flex-end;
    }
    .bot-container {
        justify-content: flex-start;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Titre de l'application
st.title("üí¨ Mon Assistant Parcours")
st.sidebar.title("Description & Fonctionnalit√©s")
st.sidebar.text("Ce chatbot est con√ßu pour r√©pondre √† vos questions sur les bourses d'√©tudes!")

# Initialisation de l'historique des messages
if "messages" not in st.session_state:
    st.session_state.messages = []

# Affichage des messages
st.write("Chat")
for msg in st.session_state.messages:
    if msg["user"] == "user":
        st.markdown(
            f"""
            <div class="message-box user-container">
                <div class="user-message">{msg['content']}</div>
                <img class="avatar" src="https://via.placeholder.com/40/0078D4/FFFFFF/?text=U">
            </div>
            """,
            unsafe_allow_html=True,
        )
    else:
        st.markdown(
            f"""
            <div class="message-box bot-container">
                <img class="avatar" src="https://via.placeholder.com/40/444444/FFFFFF/?text=B">
                <div class="bot-message">{msg['content']}</div>
            </div>
            """,
            unsafe_allow_html=True,
        )

# Entr√©e utilisateur
question = st.text_input("Posez votre question ici :", "")

# Gestion de la logique des r√©ponses
if st.button("Envoyer"):
    if question:
        # Ajout de la question √† l'historique
        st.session_state.messages.append({"user": "user", "content": question})
        
        # G√©n√©ration de la r√©ponse
        answer = retrieve_from_db(question)
        
        # Ajout de la r√©ponse √† l'historique
        st.session_state.messages.append({"user": "bot", "content": answer})

        # R√©initialisation de la question
        question = ""
        
